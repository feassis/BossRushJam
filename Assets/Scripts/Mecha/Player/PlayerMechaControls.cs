//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Mecha/Player/PlayerMechaControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMechaControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMechaControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMechaControls"",
    ""maps"": [
        {
            ""name"": ""Mecha"",
            ""id"": ""278862d6-75a6-482b-a491-e717a0c68bbe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""08fcfe91-e204-4d17-8334-7546b383b862"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""5346aa1b-81f4-4a62-af24-f53800cbcd6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""0c85cc74-ef34-4582-bb4b-f3d820b48235"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""6fe79c9f-39ce-43ec-ae84-81075c7ebfde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DefenseAbility"",
                    ""type"": ""Button"",
                    ""id"": ""eaa5a9d7-ccf3-4e8e-8ae9-8024e411d352"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""951e0e07-8a58-4cf3-95e9-3bb0de7d3acd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b5d75a0-da85-440f-bac0-a6df358a4dc8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a02534a0-ca05-4645-9c7a-9487643aa4d1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7239eda4-ba2e-4d6c-9c50-d4dca7758ad4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d3810127-0334-49df-a406-fd2de9ab6c21"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5197f78e-2a12-40e1-a629-3d77d1e4ed3d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0351578d-a3e0-4fa5-96cb-64172ff352c5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e72f36bc-311c-48fd-bfed-d92238249a8d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1209afb9-2968-45a7-8387-41bf51521441"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DefenseAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mecha
        m_Mecha = asset.FindActionMap("Mecha", throwIfNotFound: true);
        m_Mecha_Move = m_Mecha.FindAction("Move", throwIfNotFound: true);
        m_Mecha_Dash = m_Mecha.FindAction("Dash", throwIfNotFound: true);
        m_Mecha_LeftWeapon = m_Mecha.FindAction("LeftWeapon", throwIfNotFound: true);
        m_Mecha_RightWeapon = m_Mecha.FindAction("RightWeapon", throwIfNotFound: true);
        m_Mecha_DefenseAbility = m_Mecha.FindAction("DefenseAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mecha
    private readonly InputActionMap m_Mecha;
    private List<IMechaActions> m_MechaActionsCallbackInterfaces = new List<IMechaActions>();
    private readonly InputAction m_Mecha_Move;
    private readonly InputAction m_Mecha_Dash;
    private readonly InputAction m_Mecha_LeftWeapon;
    private readonly InputAction m_Mecha_RightWeapon;
    private readonly InputAction m_Mecha_DefenseAbility;
    public struct MechaActions
    {
        private @PlayerMechaControls m_Wrapper;
        public MechaActions(@PlayerMechaControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Mecha_Move;
        public InputAction @Dash => m_Wrapper.m_Mecha_Dash;
        public InputAction @LeftWeapon => m_Wrapper.m_Mecha_LeftWeapon;
        public InputAction @RightWeapon => m_Wrapper.m_Mecha_RightWeapon;
        public InputAction @DefenseAbility => m_Wrapper.m_Mecha_DefenseAbility;
        public InputActionMap Get() { return m_Wrapper.m_Mecha; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MechaActions set) { return set.Get(); }
        public void AddCallbacks(IMechaActions instance)
        {
            if (instance == null || m_Wrapper.m_MechaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MechaActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @LeftWeapon.started += instance.OnLeftWeapon;
            @LeftWeapon.performed += instance.OnLeftWeapon;
            @LeftWeapon.canceled += instance.OnLeftWeapon;
            @RightWeapon.started += instance.OnRightWeapon;
            @RightWeapon.performed += instance.OnRightWeapon;
            @RightWeapon.canceled += instance.OnRightWeapon;
            @DefenseAbility.started += instance.OnDefenseAbility;
            @DefenseAbility.performed += instance.OnDefenseAbility;
            @DefenseAbility.canceled += instance.OnDefenseAbility;
        }

        private void UnregisterCallbacks(IMechaActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @LeftWeapon.started -= instance.OnLeftWeapon;
            @LeftWeapon.performed -= instance.OnLeftWeapon;
            @LeftWeapon.canceled -= instance.OnLeftWeapon;
            @RightWeapon.started -= instance.OnRightWeapon;
            @RightWeapon.performed -= instance.OnRightWeapon;
            @RightWeapon.canceled -= instance.OnRightWeapon;
            @DefenseAbility.started -= instance.OnDefenseAbility;
            @DefenseAbility.performed -= instance.OnDefenseAbility;
            @DefenseAbility.canceled -= instance.OnDefenseAbility;
        }

        public void RemoveCallbacks(IMechaActions instance)
        {
            if (m_Wrapper.m_MechaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMechaActions instance)
        {
            foreach (var item in m_Wrapper.m_MechaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MechaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MechaActions @Mecha => new MechaActions(this);
    public interface IMechaActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnLeftWeapon(InputAction.CallbackContext context);
        void OnRightWeapon(InputAction.CallbackContext context);
        void OnDefenseAbility(InputAction.CallbackContext context);
    }
}
